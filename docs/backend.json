{
  "entities": {
    "CartItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CartItem",
      "type": "object",
      "description": "Represents an item in the user's shopping cart.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the cart item."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N CartItem). The ID of the user who added the item to the cart."
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N CartItem). The ID of the product in the cart."
        },
        "title": {
          "type": "string",
          "description": "The title of the product."
        },
        "price": {
          "type": "number",
          "description": "The price of the product."
        },
        "quantity": {
          "type": "number",
          "description": "The quantity of the product in the cart."
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the product image."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp when the item was added to the cart.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "productId",
        "title",
        "price",
        "quantity",
        "imageUrl",
        "timestamp"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents a customer order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order). The ID of the user who placed the order."
        },
        "items": {
          "type": "array",
          "description": "A list of product IDs and quantities in the order.",
          "items": {
            "type": "string"
          }
        },
        "total": {
          "type": "number",
          "description": "The total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "The status of the order (e.g., Processing, Completed, Shipped)."
        },
        "paymentId": {
          "type": "string",
          "description": "The ID of the payment associated with the order."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp when the order was placed.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "items",
        "total",
        "status",
        "paymentId",
        "timestamp"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product in the furniture catalog.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "The name of the product."
        },
        "description": {
          "type": "string",
          "description": "The description of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "The URL of the product image."
        },
        "price": {
          "type": "number",
          "description": "The price of the product."
        },
        "tagsCv": {
          "type": "array",
          "description": "Tags generated by computer vision for the product image.",
          "items": {
            "type": "string"
          }
        },
        "dominantColors": {
          "type": "array",
          "description": "Dominant colors extracted from the product image.",
          "items": {
            "type": "string"
          }
        },
        "similarIds": {
          "type": "array",
          "description": "References to similar Products. (Relationship: Product N:N Product). IDs of similar products based on semantic embeddings.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "description",
        "imageUrl",
        "price"
      ]
    },
    "Event": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Event",
      "type": "object",
      "description": "Represents an analytics event.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the event."
        },
        "type": {
          "type": "string",
          "description": "The type of event (e.g., page view, add to cart, purchase)."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Event). The ID of the user who triggered the event."
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N Event). The ID of the product associated with the event (if applicable)."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp when the event occurred.",
          "format": "date-time"
        },
        "metadata": {
          "type": "string",
          "description": "JSON data to store any metadata about the event that is required."
        }
      },
      "required": [
        "id",
        "type",
        "userId",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "carts/{userId}/items/{productId}",
        "definition": {
          "entityName": "CartItem",
          "schema": {
            "$ref": "#/backend/entities/CartItem"
          },
          "description": "Stores items in the user's cart. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The ID of the user who owns the cart."
            },
            {
              "name": "productId",
              "description": "The ID of the product in the cart."
            }
          ]
        }
      },
      {
        "path": "orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order details. Includes 'userId' for associating the order with a user.",
          "params": [
            {
              "name": "orderId",
              "description": "The unique ID of the order."
            }
          ]
        }
      },
      {
        "path": "products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product information.",
          "params": [
            {
              "name": "productId",
              "description": "The unique ID of the product."
            }
          ]
        }
      },
      {
        "path": "events/{eventId}",
        "definition": {
          "entityName": "Event",
          "schema": {
            "$ref": "#/backend/entities/Event"
          },
          "description": "Stores analytics events.",
          "params": [
            {
              "name": "eventId",
              "description": "The unique ID of the event."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the FurniVerse eCommerce application, emphasizing security, scalability, and debuggability by adhering to the principles of Authorization Independence, Structural Segregation, Access Modeling, and Data Clarity.  Authorization Independence is achieved by denormalizing relevant authorization data (specifically user IDs for cart items and orders) directly into the documents, avoiding the need for `get()` calls in security rules. Structural Segregation is enforced by keeping user-specific data (carts and orders) in separate collections under their respective user IDs. This creates homogeneous security requirements for each collection. Access Modeling uses path-based ownership (`/users/{userId}/carts/{cartId}`) to manage private user data.  QAPs (Rules Are Not Filters) are supported by the path-based structure, which enables secure list operations based on user ID without requiring filtering on the client side.  The structure also supports invariants such as ensuring data integrity for ownership (each cart item and order is explicitly linked to a user), timestamps (recording creation times), and other denormalized data."
  }
}